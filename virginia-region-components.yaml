AWSTemplateFormatVersion: '2010-09-09'
Description: 'OU Tag Inheritance Components - Virginia Region (us-east-1)'

Parameters:
  LambdaTagPropagatorRoleArn:
    Type: String
    Description: ARN of the LambdaTagPropagatorRole from the main stack
    Default: ''
  
  StackName:
    Type: String
    Description: Name of the main stack (for resource naming)
    Default: 'AutomatedTaggingStrategy'

Conditions:
  HasLambdaRoleArn: !Not [!Equals [!Ref LambdaTagPropagatorRoleArn, '']]

Resources:
  # Lambda function for OU tag inheritance (must be in us-east-1 for Organizations events)
  InheriteTagOuAccountsFunction:
    Type: AWS::Lambda::Function
    Condition: HasLambdaRoleArn
    Properties:
      FunctionName: !Sub '${StackName}-InheriteTagOuAccounts'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !Ref LambdaTagPropagatorRoleArn
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          SELF_ROLE_NAME: LambdaTagPropagatorRole
      Code:
        ZipFile: |
          import json
          import os
          import logging
          from typing import Dict, List

          import boto3

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          org = boto3.client("organizations")

          # Set this to your Lambda execution role name so we can ignore self-triggered events.
          SELF_ROLE_NAME = os.environ.get("SELF_ROLE_NAME", "")  # e.g., "OuSameLevelTaggerRole"


          # ---------- Helpers ----------

          def _list_direct_accounts(ou_id: str) -> List[str]:
              out: List[str] = []
              p = org.get_paginator("list_children")
              for page in p.paginate(ParentId=ou_id, ChildType="ACCOUNT"):
                  out += [c["Id"] for c in page.get("Children", [])]
              return out

          def _list_direct_child_ous(ou_id: str) -> List[str]:
              out: List[str] = []
              p = org.get_paginator("list_children")
              for page in p.paginate(ParentId=ou_id, ChildType="ORGANIZATIONAL_UNIT"):
                  out += [c["Id"] for c in page.get("Children", [])]
              return out

          def _list_tags_for(resource_id: str) -> Dict[str, str]:
              resp = org.list_tags_for_resource(ResourceId=resource_id)
              return {t["Key"]: t["Value"] for t in resp.get("Tags", [])}

          def _tag_targets(resource_ids: List[str], tags: Dict[str, str]) -> None:
              if not resource_ids or not tags:
                  return
              tag_list = [{"Key": k, "Value": v} for k, v in tags.items()]
              for rid in resource_ids:
                  org.tag_resource(ResourceId=rid, Tags=tag_list)

          def _untag_targets(resource_ids: List[str], keys: List[str]) -> None:
              if not resource_ids or not keys:
                  return
              for rid in resource_ids:
                  org.untag_resource(ResourceId=rid, TagKeys=keys)

          def _ignore_self_event(detail: dict) -> bool:
              """
              Skip events generated by this Lambda's own role to avoid cascading to level-2 via new OU events.
              CloudTrail userIdentity.arn looks like:
                arn:aws:sts::<acct>:assumed-role/<ROLE_NAME>/<session>
              """
              if not SELF_ROLE_NAME:
                  return False
              ui = detail.get("userIdentity") or {}
              arn = ui.get("arn", "")
              return f":assumed-role/{SELF_ROLE_NAME}/" in arn


          # ---------- Core ops (same level only) ----------

          def process_ou_tag_add_or_update(ou_id: str) -> dict:
              """
              When an OU is tagged in Organizations, apply those tag key/values to:
                - direct accounts under that OU
                - direct child OUs under that OU
              (Do not recurse beyond one level.)
              """
              ou_tags = _list_tags_for(ou_id)
              acct_ids = _list_direct_accounts(ou_id)
              child_ou_ids = _list_direct_child_ous(ou_id)

              _tag_targets(acct_ids, ou_tags)
              _tag_targets(child_ou_ids, ou_tags)

              logger.info(f"[ou:{ou_id}] applied {len(ou_tags)} tag(s) to {len(acct_ids)} direct accounts and {len(child_ou_ids)} direct OUs")
              return {"ouId": ou_id, "accounts": len(acct_ids), "childOUs": len(child_ou_ids), "tags": len(ou_tags)}


          def process_ou_tag_remove(ou_id: str, removed_keys: List[str]) -> dict:
              """
              When tags are removed from an OU, remove those keys from:
                - direct accounts under that OU
                - direct child OUs under that OU
              (No recursion.)
              """
              acct_ids = _list_direct_accounts(ou_id)
              child_ou_ids = _list_direct_child_ous(ou_id)

              _untag_targets(acct_ids, removed_keys)
              _untag_targets(child_ou_ids, removed_keys)

              logger.info(f"[ou:{ou_id}] removed {len(removed_keys)} key(s) from {len(acct_ids)} direct accounts and {len(child_ou_ids)} direct OUs")
              return {"ouId": ou_id, "accounts": len(acct_ids), "childOUs": len(child_ou_ids), "removedKeys": removed_keys}


          # ---------- Lambda entry ----------

          def lambda_handler(event, _context):
              """
              Supports both:
                1) EventBridge (CloudTrail) OU events:
                   - TagResource on OU  -> same-level add/update
                   - UntagResource on OU -> same-level remove
                2) Manual invoke:
                   { "ouId": "ou-xxxx-abc", "set": {"K":"V"}, "remove": ["K1","K2"] }
                   (Tags the OU itself is done by you via console/CLI or by another workflow.)
              """
              logger.info(f"[invoke] {json.dumps(event)[:2000]}")
              detail = (event or {}).get("detail") or {}
              name = detail.get("eventName")

              # Path 1: EventBridge OU events
              if name in ("TagResource", "UntagResource"):
                  # Ignore self-triggered events (when we tag child OUs/accounts)
                  if _ignore_self_event(detail):
                      logger.info("ignoring self-triggered event")
                      return {"status": "ignored-self"}

                  rp = detail.get("requestParameters") or {}
                  ou_id = rp.get("resourceId", "")
                  if not ou_id.startswith("ou-"):
                      return {"status": "ignored", "reason": "not-ou"}
                  if name == "TagResource":
                      result = process_ou_tag_add_or_update(ou_id)
                      return {"status": "ok", "op": "tag", **result}
                  else:
                      removed_keys = rp.get("tagKeys", []) or []
                      result = process_ou_tag_remove(ou_id, removed_keys)
                      return {"status": "ok", "op": "untag", **result}

              # Path 2: Manual invoke (optional)
              ou_id = event.get("ouId")
              if ou_id and ou_id.startswith("ou-"):
                  to_set: Dict[str, str] = event.get("set") or {}
                  to_remove: List[str] = event.get("remove") or []
                  result = {}
                  if to_set:
                      # apply to same-level children; we don't retag the OU here (you already did via console/CLI)
                      result = process_ou_tag_add_or_update(ou_id)
                  if to_remove:
                      result = process_ou_tag_remove(ou_id, to_remove)
                  return {"status": "ok", **result}

              return {"status": "ignored", "reason": "no-matching-path"}

  # EventBridge Rule for CreateAccount events
  CreateAccountTagSyncRule:
    Type: AWS::Events::Rule
    Condition: HasLambdaRoleArn
    Properties:
      Name: !Sub '${StackName}-CreateAccountTagSync'
      Description: 'Trigger OU tag inheritance when new accounts are created'
      EventPattern:
        source: ['aws.organizations']
        detail-type: ['AWS Service Event']
        detail:
          eventName: ['CreateAccountResult']
      State: ENABLED
      Targets:
        - Arn: !GetAtt InheriteTagOuAccountsFunction.Arn
          Id: CreateAccountTagSyncTarget

  # EventBridge Rule for MoveAccount events
  MoveAccountTagSyncRule:
    Type: AWS::Events::Rule
    Condition: HasLambdaRoleArn
    Properties:
      Name: !Sub '${StackName}-MoveAccountTagSync'
      Description: 'Trigger OU tag inheritance when accounts are moved between OUs'
      EventPattern:
        source: ['aws.organizations']
        detail-type: ['AWS API Call via CloudTrail']
        detail:
          eventName: ['MoveAccount']
      State: ENABLED
      Targets:
        - Arn: !GetAtt InheriteTagOuAccountsFunction.Arn
          Id: MoveAccountTagSyncTarget

  # EventBridge Rule for Tag/Untag OU events
  TagUnTagAccountTagSyncRule:
    Type: AWS::Events::Rule
    Condition: HasLambdaRoleArn
    Properties:
      Name: !Sub '${StackName}-TagUnTagAccountTagSync'
      Description: 'Trigger OU tag inheritance when OUs are tagged or untagged'
      EventPattern:
        source: ['aws.organizations']
        detail-type: ['AWS API Call via CloudTrail']
        detail:
          eventSource: ['organizations.amazonaws.com']
          eventName: ['TagResource', 'UntagResource']
          requestParameters:
            resourceId:
              - prefix: 'ou-'
      State: ENABLED
      Targets:
        - Arn: !GetAtt InheriteTagOuAccountsFunction.Arn
          Id: TagUnTagAccountTagSyncTarget

  # Permission for EventBridge to invoke the OU tag inheritance function
  EventBridgeInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: HasLambdaRoleArn
    Properties:
      FunctionName: !GetAtt InheriteTagOuAccountsFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/${StackName}-*'

Outputs:
  # OU Tag Inheritance Components
  InheriteTagOuAccountsFunctionArn:
    Description: ARN of the OU tag inheritance Lambda function
    Value: !If [HasLambdaRoleArn, !GetAtt InheriteTagOuAccountsFunction.Arn, 'Not deployed - LambdaTagPropagatorRoleArn not provided']
    Export:
      Name: !Sub '${StackName}-InheriteTagOuAccountsFunctionArn'
  
  CreateAccountTagSyncRuleName:
    Description: Name of the CreateAccount EventBridge rule
    Value: !If [HasLambdaRoleArn, !Ref CreateAccountTagSyncRule, 'Not deployed']
    Export:
      Name: !Sub '${StackName}-CreateAccountTagSyncRuleName'
  
  MoveAccountTagSyncRuleName:
    Description: Name of the MoveAccount EventBridge rule
    Value: !If [HasLambdaRoleArn, !Ref MoveAccountTagSyncRule, 'Not deployed']
    Export:
      Name: !Sub '${StackName}-MoveAccountTagSyncRuleName'
  
  TagUnTagAccountTagSyncRuleName:
    Description: Name of the Tag/Untag OU EventBridge rule
    Value: !If [HasLambdaRoleArn, !Ref TagUnTagAccountTagSyncRule, 'Not deployed']
    Export:
      Name: !Sub '${StackName}-TagUnTagAccountTagSyncRuleName'
